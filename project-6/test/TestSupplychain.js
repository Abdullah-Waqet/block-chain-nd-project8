// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const pharmacyID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
 
    const oneEther = web3.utils.toWei('1', 'ether');
    const twoEthers = web3.utils.toWei('2', 'ether');

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    it("Testing smart contract function addItem()", async() => {
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addItem(upc, productNotes, productPrice, distributorID, pharmacyID, consumerID)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
    })    

    it("Testing smart contract function sellItem()", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.addItem(upc, productNotes, productPrice, distributorID, pharmacyID, consumerID)

        await supplyChain.sellItem(upc, productPrice);


        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    })    

    // 5th Test
    it("Testing smart contract function buyItem()", async() => {

        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.buyItem(upc, { from: accounts[4], value: twoEthers });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        
    })    

    it("Testing smart contract function shipItem()", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.shipItem(upc);

       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')              
    })    

    it("Testing smart contract function receiveItem()", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.receiveItem(upc);

       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')     
    })    

});

